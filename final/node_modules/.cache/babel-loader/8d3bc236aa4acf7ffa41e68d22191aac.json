{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar fetchScores = function fetchScores(sport) {\n  try {\n    var url = \"https://www.espn.com/\" + sport + \"/scoreboard\";\n    return Promise.resolve(fetch(url).then(function (res) {\n      return res.text();\n    }).then(function (body) {\n      return body;\n    })).then(function (website) {\n      var $ = cheerio.load(website);\n      return Promise.resolve($('script').toArray()).then(function (scripts) {\n        var scoreboardScript = scripts.find(function (script) {\n          return script.children[0] && script.children[0].data.includes('window.espn.scoreboardData');\n        }).children[0].data;\n        var strippedData = scoreboardScript.replace('window.espn.scoreboardData', '').replace('=', '').replace('if(!window.espn_ui.device.isMobile){window.espn.loadType = \"ready\"};', '').replace(/;/g, '').split('window.espn.scoreboardSettings')[0].trim();\n        var data = JSON.parse(strippedData);\n        var events = data.events;\n        var scores = [];\n        events.map(function (event) {\n          var competitions = event.competitions,\n              date = event.date,\n              shortName = event.shortName,\n              status = event.status;\n          var home = competitions[0].competitors.find(function (team) {\n            return team.homeAway === 'home';\n          });\n          var away = competitions[0].competitors.find(function (team) {\n            return team.homeAway === 'away';\n          });\n          var situation = competitions[0].situation;\n          delete home.team.links;\n          delete home.team.uid;\n          delete home.team.id;\n          delete away.team.links;\n          delete away.team.uid;\n          delete away.team.id;\n          scores = [].concat(scores, [{\n            startTime: date,\n            shortName: shortName,\n            status: {\n              inning: status.period,\n              state: status.type.state,\n              detail: status.type.detail,\n              shortDetail: status.type.shortDetail,\n              completed: status.type.completed\n            },\n            situation: situation,\n            teams: {\n              awayTeam: _extends({}, away.team, {\n                score: away.score\n              }),\n              homeTeam: _extends({}, home.team, {\n                score: home.score\n              })\n            }\n          }]);\n        });\n        return scores;\n      });\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nvar cheerio = require('cheerio');\n\nvar useScores = function useScores(sport, options) {\n  var updateIntervalSeconds = (options === null || options === void 0 ? void 0 : options.updateIntervalSeconds) || 30;\n\n  var _useState = useState([]),\n      scores = _useState[0],\n      setScores = _useState[1];\n\n  useEffect(function () {\n    var getSport = function getSport() {\n      try {\n        return Promise.resolve(fetchScores(sport)).then(function (sportsScores) {\n          setScores(sportsScores);\n        });\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n\n    getSport();\n    var refreshInterval = setInterval(getSport, 1000 * updateIntervalSeconds);\n    return function () {\n      clearInterval(refreshInterval);\n    };\n  }, [sport]);\n  return {\n    scores: scores\n  };\n};\n\nexport { useScores };","map":{"version":3,"sources":["../src/lib/fetchScores.ts","../src/index.tsx"],"names":["cheerio","require","fetchScores","url","website","res","$","scripts","scoreboardScript","script","strippedData","data","JSON","events","scores","competitions","date","shortName","status","event","home","team","away","situation","startTime","inning","state","detail","shortDetail","completed","teams","awayTeam","score","homeTeam","useScores","updateIntervalSeconds","setScores","useState","useEffect","getSport","sportsScores","refreshInterval","setInterval","clearInterval"],"mappings":"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","sourcesContent":["const cheerio = require('cheerio')\n\nexport async function fetchScores(sport: 'mlb' | 'nba' | 'nfl') {\n  const url = `https://www.espn.com/${sport}/scoreboard`\n  const website = await fetch(url)\n    .then((res: any) => res.text())\n    .then((body: any) => body)\n\n  const $ = cheerio.load(website)\n  const scripts = await $('script').toArray()\n\n  const scoreboardScript = scripts.find(\n    (script: any) =>\n      script.children[0] &&\n      script.children[0].data.includes('window.espn.scoreboardData')\n  ).children[0].data\n\n  const strippedData = scoreboardScript\n    .replace('window.espn.scoreboardData', '')\n    .replace('=', '')\n    .replace(\n      'if(!window.espn_ui.device.isMobile){window.espn.loadType = \"ready\"};',\n      ''\n    )\n    .replace(/;/g, '')\n    .split('window.espn.scoreboardSettings')[0]\n    .trim()\n\n  const data = JSON.parse(strippedData)\n\n  const { events } = data\n\n  let scores: any[] = []\n  events.map((event: any) => {\n    const { competitions, date, shortName, status } = event\n\n    const home = competitions[0].competitors.find(\n      (team: any) => team.homeAway === 'home'\n    )\n    const away = competitions[0].competitors.find(\n      (team: any) => team.homeAway === 'away'\n    )\n    const situation = competitions[0].situation\n\n    delete home.team.links\n    delete home.team.uid\n    delete home.team.id\n    delete away.team.links\n    delete away.team.uid\n    delete away.team.id\n\n    scores = [\n      ...scores,\n      {\n        startTime: date,\n        shortName,\n        status: {\n          inning: status.period,\n          state: status.type.state,\n          detail: status.type.detail,\n          shortDetail: status.type.shortDetail,\n          completed: status.type.completed\n        },\n        situation,\n        teams: {\n          awayTeam: {\n            ...away.team,\n            score: away.score\n          },\n          homeTeam: {\n            ...home.team,\n            score: home.score\n          }\n        }\n      }\n    ]\n  })\n\n  return scores\n}\n","import { useEffect, useState } from 'react'\nimport { fetchScores } from './lib/fetchScores'\n\ninterface Options {\n  updateIntervalSeconds?: number\n}\n\ntype Sport = 'mlb' | 'nba' | 'nfl'\n\nexport const useScores = (sport: Sport, options?: Options) => {\n  const updateIntervalSeconds = options?.updateIntervalSeconds || 30\n  const [scores, setScores] = useState([])\n\n  useEffect(() => {\n    const getSport = async () => {\n      const sportsScores: any = await fetchScores(sport)\n      setScores(sportsScores)\n    }\n\n    getSport()\n\n    const refreshInterval = setInterval(getSport, 1000 * updateIntervalSeconds)\n\n    return () => {\n      clearInterval(refreshInterval)\n    }\n  }, [sport])\n\n  return {\n    scores\n  }\n}\n"]},"metadata":{},"sourceType":"module"}