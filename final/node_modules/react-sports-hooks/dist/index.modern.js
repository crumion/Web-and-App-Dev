import { useState, useEffect } from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var fetchScores = function fetchScores(sport) {
  try {
    var url = "https://www.espn.com/" + sport + "/scoreboard";
    return Promise.resolve(fetch(url).then(function (res) {
      return res.text();
    }).then(function (body) {
      return body;
    })).then(function (website) {
      var $ = cheerio.load(website);
      return Promise.resolve($('script').toArray()).then(function (scripts) {
        var scoreboardScript = scripts.find(function (script) {
          return script.children[0] && script.children[0].data.includes('window.espn.scoreboardData');
        }).children[0].data;
        var strippedData = scoreboardScript.replace('window.espn.scoreboardData', '').replace('=', '').replace('if(!window.espn_ui.device.isMobile){window.espn.loadType = "ready"};', '').replace(/;/g, '').split('window.espn.scoreboardSettings')[0].trim();
        var data = JSON.parse(strippedData);
        var events = data.events;
        var scores = [];
        events.map(function (event) {
          var competitions = event.competitions,
              date = event.date,
              shortName = event.shortName,
              status = event.status;
          var home = competitions[0].competitors.find(function (team) {
            return team.homeAway === 'home';
          });
          var away = competitions[0].competitors.find(function (team) {
            return team.homeAway === 'away';
          });
          var situation = competitions[0].situation;
          delete home.team.links;
          delete home.team.uid;
          delete home.team.id;
          delete away.team.links;
          delete away.team.uid;
          delete away.team.id;
          scores = [].concat(scores, [{
            startTime: date,
            shortName: shortName,
            status: {
              inning: status.period,
              state: status.type.state,
              detail: status.type.detail,
              shortDetail: status.type.shortDetail,
              completed: status.type.completed
            },
            situation: situation,
            teams: {
              awayTeam: _extends({}, away.team, {
                score: away.score
              }),
              homeTeam: _extends({}, home.team, {
                score: home.score
              })
            }
          }]);
        });
        return scores;
      });
    });
  } catch (e) {
    return Promise.reject(e);
  }
};

var cheerio = require('cheerio');

var useScores = function useScores(sport, options) {
  var updateIntervalSeconds = (options === null || options === void 0 ? void 0 : options.updateIntervalSeconds) || 30;

  var _useState = useState([]),
      scores = _useState[0],
      setScores = _useState[1];

  useEffect(function () {
    var getSport = function getSport() {
      try {
        return Promise.resolve(fetchScores(sport)).then(function (sportsScores) {
          setScores(sportsScores);
        });
      } catch (e) {
        return Promise.reject(e);
      }
    };

    getSport();
    var refreshInterval = setInterval(getSport, 1000 * updateIntervalSeconds);
    return function () {
      clearInterval(refreshInterval);
    };
  }, [sport]);
  return {
    scores: scores
  };
};

export { useScores };
//# sourceMappingURL=index.modern.js.map
